
// For those who want the bleeding edge
buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'org.ajoberstar:gradle-git:1.6.0'
    }
}

plugins {
    id 'com.matthewprenger.cursegradle' version '1.0.9'
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'org.ajoberstar.grgit'

version = "1.80pr1.3"
group = "org.squiddev"
archivesBaseName = "cc-tweaked"

minecraft {
    version = "1.12-14.21.1.2387"
    runDir = "run"
    replace '${version}', project.version

    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not allways work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "snapshot_20170629"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

repositories {
    maven {
        name = "JEI"
        url  = "http://dvs1.progwml6.com/files/maven"
    }
    maven {
        name = "squiddev"
        url = "https://dl.bintray.com/squiddev/maven"
    }
    maven {
        name = "CoFH Maven"
        url = "http://maven.covers1624.net"
    }
}

configurations {
    shade
    compile.extendsFrom shade
}

dependencies {
    deobfProvided "mezz.jei:jei_1.12:4.7.5.86:api"
    compile "cofh:RedstoneFlux:1.12-2.0.0.1:deobf"
    runtime "mezz.jei:jei_1.12:4.7.5.86"
    shade 'org.squiddev:Cobalt:0.3.1'
}

javadoc {
    include "dan200/computercraft/api/**/*.java"
}

jar {
    dependsOn javadoc

    manifest {
        attributes('FMLAT': 'computercraft_at.cfg')
    }

    into("docs", { from (javadoc.destinationDir) })

    into("api", { from (sourceSets.main.allSource) {
        include "dan200/computercraft/api/**/*.java"
    }})

    from configurations.shade.collect { it.isDirectory() ? it : zipTree(it) }
}

import org.ajoberstar.grgit.Grgit

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    def grgit = Grgit.open(dir: '.')
    inputs.property "commithash", grgit.head().id

    def blacklist = ['GitHub', 'dan200', 'Daniel Ratcliffe']
    Set<String> contributors = []

    grgit.log().each {
        if (!blacklist.contains(it.author.name)) contributors.add(it.author.name)
        if (!blacklist.contains(it.committer.name)) contributors.add(it.committer.name)
    }

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        include 'assets/computercraft/lua/rom/help/credits.txt'

        expand 'version':project.version,
               'mcversion':project.minecraft.version,
               'gitcontributors':contributors.sort(false, String.CASE_INSENSITIVE_ORDER).join('\n')
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
        exclude 'assets/computercraft/lua/rom/help/credits.txt'
    }
}


curseforge {
    apiKey = project.hasProperty('curseForgeApiKey') ? project.curseForgeApiKey : ''
    project {
        id = '282001'
        releaseType = 'beta'
        changelog = ''
    }
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint"
    }
}

runClient.outputs.upToDateWhen { false }
runServer.outputs.upToDateWhen { false }
